# -*- coding: utf-8 -*-
"""Python_Tweet_Bitcoin_Graph.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oMBk8GUqkQGmhC9csvnZ3SKtdXvIbk-V

#Practice 1: Request to address (Kaggle for tweet and bitcoin)
"""

!pip install kaggle

"""###kaggle datasets download -d [DATASET] -> bitcoin-tweets -> https://www.kaggle.com/kaushiksuresh147/bitcoin-tweets"""

!kaggle datasets download -d bitcoin-tweets

import requests
import json
import matplotlib.pyplot as plt
import pandas as pd

def scrap(url):
  r = requests.get(url)
  t = r.text
  pyjs = json.loads(t)
  return pyjs

url = 'https://www.kaggle.com/kaushiksuresh147/bitcoin-tweets'
response = requests.get(url)
results = json.loads(response.text)

"""##Count Number of Tweets for each Date and Density"""

df_tweet = pd.read_csv("date_tweet_2.csv")
df_tweet = df_tweet.groupby(df_tweet.columns.tolist(),as_index=False).size()
df_tweet.to_csv('df_tweet.csv')
print('Density: ', df_tweet['size'].max())

df_tweet

"""#Practice 2: Find Relationship Between Two Nodes (Tweet Bitcoin)

##Get Bit Coin Date
"""

import pandas as pd

df_bitcoin = pd.read_csv("coin_Bitcoin.csv")
df_bitcoin['Date'] = pd.to_datetime(df_bitcoin['Date']).dt.date
df_bitcoin.to_csv('df_bitcoin.csv')
df_bitcoin

df_bitcoin_date = pd.read_csv("df_bitcoin_date.csv")
df_bitcoin_date

"""##Merge"""

import numpy as np
new_bitcoin = []
for index, row in df_bitcoin_date.iterrows():
  for index2, row2 in df_tweet.iterrows():
    if row['Date']==row2['tweet_date']:
      new_bitcoin.append((row['Name'], row['Date'],row2['tweet_date'], row2['size'], row['Open'], row['Close']))
      print(row['Name'], row['Date'],row2['tweet_date'], row2['size'], row['Open'], row['Close'])

numpy_array = np.array(new_bitcoin)
df_merge = pd.DataFrame(numpy_array, columns = ["Name", "Bitcoin_Date", "tweet_date", "tweet_count", "Open", "Close"])
df_merge.to_csv('df_merge.csv')


df_merge

"""##Practice 3: Plot Graph

##Graph Nodes Edges
"""

import numpy as np
import networkx as nx
from matplotlib import pyplot as plt
import pandas as pd

tweet_Bitcoin_name_date = pd.read_csv("date_tweet_user.csv")
G = nx.Graph()

for index, row in tweet_Bitcoin_name_date.iterrows():
  G.add_edge(row['user_name'], row['date'])
plt.figure(figsize=(10,6))
nx.draw(G)
plt.savefig("Graph.pdf", format="pdf")
plt.show()

"""#Practice 4: igraph

###date_tweet_user.csv
"""

import numpy as np
P = np.zeros((11,11))

P[0][2]=1
P[0][9]=1
P[1][5]=1
P[1][8]=1
P[1][9]=1
P[2][9]=1
P[3][1]=1
P[3][4]=1
P[4][2]=1
P[5][10]=1
P[6][7]=1
P[6][8]=1
P[7][0]=1
P[7][7]=1
P[8][2]=1
P[8][8]=1
P[8][10]=1
P[9][6]=1
P[9][2]=1
P[10][8]=1
P[10][10]=1

P

!pip install igraph

!pip install --upgrade python-igraph

"""#IGraph"""

import numpy as np
import networkx as nx
from matplotlib import pyplot as plt
import pandas as pd
df_merge = pd.read_csv("df_merge.csv")
df_user_tweet = pd.read_csv("df_user_tweet.csv")
tweet_Bitcoin_name_date = pd.read_csv("tweet_Bitcoin_name_date.csv")
nodes = []
date_ = tweet_Bitcoin_name_date['date']
for col1 in date_.unique(): #Bitcoin_Date
  nodes.append(col1)
#print(len(nodes))

user_ = tweet_Bitcoin_name_date['user_name']
for col2 in user_.unique(): #user_name
  nodes.append(col2)

print('Nodes: ',len(nodes))

print('Edges: ',len(tweet_Bitcoin_name_date))
#nodes

import numpy as np
import networkx as nx
from matplotlib import pyplot as plt
import pandas as pd

tweet_Bitcoin_name_date = pd.read_csv("tweet_Bitcoin_name_date.csv")
df1 = pd.DataFrame(tweet_Bitcoin_name_date.iloc[1309:1315, :])
df1

df2 = pd.DataFrame(tweet_Bitcoin_name_date.iloc[4230:4235, :])
df2

df3 = pd.DataFrame(tweet_Bitcoin_name_date.iloc[65842:65848, :])
df3

df4 = pd.DataFrame(tweet_Bitcoin_name_date.iloc[117056:117061, :])
df4


df5 = pd.DataFrame(tweet_Bitcoin_name_date.iloc[80470:80477, :])
df5

result = pd.concat([df1, df2, df3, df4, df5], axis=0)
print(len(result))
result

nodes_G = []
date_ = result['date']
for col1 in date_.unique(): #Bitcoin_Date
  nodes_G.append(col1)
#print(len(nodes))

user_ = result['user_name']
for col2 in user_.unique(): #user_name
  nodes_G.append(col2)

len_nodes =len(nodes_G)
GP = np.zeros(( len_nodes,len_nodes))
df = pd.DataFrame(result.iloc[:28])

for  index3, row3 in  df.iterrows():
  i=nodes_G.index(row3['date'])
  #print(i)
  j=nodes_G.index(row3['user_name'])
  #print(j)
  GP[i][j] = 1

GP

"""#Practice 6: Scatter Plot"""

!pip install --upgrade python-igraph

from matplotlib.pyplot import figure
import matplotlib.pyplot as plt
import igraph
g = igraph.Graph.Adjacency(GP, mode='undirected', weighted=True)
fig  = figure(figsize=(2, 2), dpi=10000)
fig, ax = plt.subplots()
igraph.plot(g, target=ax)

from igraph import *
from matplotlib import pyplot as plot

i = g.community_infomap()
pal = igraph.drawing.colors.ClusterColoringPalette(len(i))
g.vs['color'] = pal.get_many(i.membership)
g.vs['name'] = nodes
fig  = figure(figsize=(2, 2), dpi=10000)
fig, ax = plt.subplots()
igraph.plot(g, target=ax, vertex_color = g.vs['color'], vertex_label =g.vs['name'])

"""#Community"""

import community
import networkx.algorithms.community as nx_comm
import community.community_louvain as community_louvain
import networkx as nx
community =g.community_multilevel()
print('community.membership: ',community.membership)
print('community.modularity: ', community.modularity)
print('community.size_histogram(): ',community.size_histogram())
print('community.summary(): ',community.summary())

"""#Centrality"""

estimate = g.betweenness(vertices=None, directed=True, cutoff=2)
print( 'Betweenness computation complete.'  )

outcsv = csv.writer(open('centrality.csv', 'wb'))

for v in graph.vs():
   outcsv.writerow([v, estimate[vs]])

from matplotlib.pyplot import figure
import matplotlib.pyplot as plt
import igraph
g = igraph.Graph.Adjacency(GP)
fig  = figure(figsize=(2, 2), dpi=10000)
fig, ax = plt.subplots()
igraph.plot(g, target=ax)

G = nx.Graph(P)
nx.draw_networkx(G)

Result= nx.degree_centrality(G)

print(Result)

g = igraph.Graph.Adjacency(P)

"""#Practice 5: Number of Nodes and Edges"""

import numpy as np
import networkx as nx
from matplotlib import pyplot as plt
import pandas as pd

df_merge = pd.read_csv("df_merge.csv")
df_user_tweet = pd.read_csv("df_user_tweet.csv")
tweet_Bitcoin_name_date = pd.read_csv("tweet_Bitcoin_name_date.csv")
G = nx.Graph()

for index, row in df_merge.iterrows():
  # To add a node, date
  G.add_node(row['Bitcoin_Date'])

for index2, row2 in df_user_tweet.iterrows():
  # To add a node, tweet
  G.add_node(row2['user_name'])

for index3, row3 in tweet_Bitcoin_name_date.iterrows():
  G.add_edge(row3['date'], row3['user_name'])

print(G)

"""#Practice 8:community_detection

###Algorithm Girwan Newman
"""

import matplotlib.pyplot as plt
import networkx as nx
from networkx.algorithms.community.centrality import girvan_newman

"""###1- Communities Detection by networkx - girvan_newman"""

!pip install arabic-reshaper

!pip install python-bidi

from bidi.algorithm import get_display
from arabic_reshaper import reshape

communities = girvan_newman(G)
node_groups = []
for com in next(communities):
  node_groups.append(list(com))

print(len(node_groups))

color_map = []
for node in G:
    if node in node_groups[0]:
        color_map.append('blue')
    elif node in node_groups[1]:
        color_map.append('green')
    elif node in node_groups[2]:
      color_map.append('red')
    elif node in node_groups[3]:
      color_map.append('yellow')


reshaped_text_a = reshape(u'Whale')
a = get_display(reshaped_text_a)

reshaped_text_b = reshape(u'Crypto Squawk')
b = get_display(reshaped_text_b)

reshaped_text_c = reshape(u'Brett Murphy')
c = get_display(reshaped_text_c)

reshaped_text_d = reshape(u'Crypto Cartel')
d = get_display(reshaped_text_d)

reshaped_text_e = reshape(u'Smokyho')
e = get_display(reshaped_text_e)

reshaped_text_f = reshape(u'WA State')
f = get_display(reshaped_text_f)

reshaped_text_g = reshape(u'Susan Hillary')
g = get_display(reshaped_text_g)

reshaped_text_h = reshape(u'Kush Jain')
h = get_display(reshaped_text_h)

reshaped_text_i = reshape(u'Bitcoin Mate')
i = get_display(reshaped_text_i)

reshaped_text_j = reshape(u'Bitcoin Price')
j = get_display(reshaped_text_j)

reshaped_text_k = reshape(u'Web Analysis')
k = get_display(reshaped_text_k)


mapping =   {0: a,   1:b , 2:c, 3:d, 4:e, 5:f, 6:g, 7:h, 8:i, 9:j, 10:k }

pos = nx.spring_layout(G, k=1.5, iterations=100)
#G = nx.relabel_nodes(G, mapping, copy=False)
nx.draw(G,pos, node_color=color_map,node_size=500, with_labels=True)
plt.savefig("Graph.png", format="PNG")
plt.show()

import igraph
import matplotlib.pyplot as plt
# load data into a graph
g = igraph.Graph.Read_Ncol('network.txt')

# plot graph
#fig  = figure(figsize=(2, 2), dpi=10000)

fig, ax = plt.subplots()
igraph.plot(g, target=ax)

# identify communities
communities = igraph.community_edge_betweenness()

# not really sure what to do next
num_communities = communities.optimal_count
communities.as_clustering(num_communities)

"""###Modularity"""

import community
import networkx.algorithms.community as nx_comm
import community.community_louvain as community_louvain
import networkx as nx
community =g.community_multilevel()

"""###IGraph Communities Detection"""

# identify communities
communities = igraph.community_edge_betweenness()

# not really sure what to do next
num_communities = communities.optimal_count
communities.as_clustering(num_communities)

"""###Compare - By dendrogram"""

# calculate dendrogram
dendrogram = igraph.community_edge_betweenness()
# convert it into a flat clustering
clusters = dendrogram.as_clustering()
# get the membership vector
membership = clusters.membership